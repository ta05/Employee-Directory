{"version":3,"sources":["components/Button/index.js","components/ColumnHeader/index.js","components/Form/index.js","components/Table/index.js","components/TableBody/index.js","components/TableHead/index.js","components/TableRow/index.js","components/Title/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","handleClick","children","onClick","ColumnHeader","header","scope","id","name","role","department","salary","Form","props","className","style","width","value","placeholder","onChange","handleInputChange","Table","backgroundColor","fontFamily","TableBody","TableHead","TableRow","employee","Title","src","alt","Wrapper","App","state","employees","filtered","order","event","console","log","target","filterTable","setState","filter","toLowerCase","includes","trim","sortTable","preventDefault","sort","a","b","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.074b3dcf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Button({handleClick, children}) {\r\n    return (\r\n        <button onClick={handleClick}>{children}</button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\n\r\nfunction ColumnHeader({header}) {\r\n    return (\r\n        <tr>\r\n            <th scope=\"col\">{header.id}</th>\r\n            <th scope=\"col\">{header.name}</th>\r\n            <th scope=\"col\">{header.role}</th>\r\n            <th scope=\"col\">{header.department}</th>\r\n            <th scope=\"col\">{header.salary}</th>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default ColumnHeader;","import React from \"react\";\r\n\r\nfunction Form(props) {\r\n    return (\r\n        <div>\r\n            <form className=\"form\" style={{width: \"150%\"}}>\r\n                <input\r\n                    value={props.value}\r\n                    name=\"department\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Enter a department to filter by\"\r\n                    onChange={props.handleInputChange}\r\n                />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nfunction Table(props) {\r\n    const style = {\r\n        backgroundColor: \"rgba(0,0,0,0)\",\r\n        fontFamily: \"'Press Start 2P', cursive\"\r\n    };\r\n\r\n    return <table className=\"table table-dark\" style={style}>{props.children}</table>;\r\n}\r\n\r\nexport default Table;","import React from \"react\";\r\n\r\nfunction TableBody(props) {\r\n    return <tbody>{props.children}</tbody>;\r\n}\r\n\r\nexport default TableBody;","import React from \"react\";\r\n\r\nfunction TableHead(props) {\r\n    return <thead className=\"table-head\">{props.children}</thead>;\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\n\r\nfunction TableRow({employee}) {\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{employee.id}</th>\r\n            <td>{employee.name}</td>\r\n            <td>{employee.role}</td>\r\n            <td>{employee.department}</td>\r\n            <td>{employee.salary}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableRow;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Title(props) {\r\n    return <img src=\"./assets/images/undertale-title.png\" className=\"title\" alt=\"Undertale Title Logo\"></img>;\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\n// import { BrowserRouter as Router, Route } from \"react-router-dom\";\n// import { ColumnHeader, Table, TableBody, TableHead, TableRow, Title, Wrapper } from \"./components\";\nimport Button from \"./components/Button\";\nimport ColumnHeader from \"./components/ColumnHeader\";\nimport Form from \"./components/Form\";\nimport Table from \"./components/Table\";\nimport TableBody from \"./components/TableBody\";\nimport TableHead from \"./components/TableHead\";\nimport TableRow from \"./components/TableRow\";\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport employees from \"./employees.json\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    employees,\n    filtered: employees,\n    header: {\n      id: \"ID\",\n      name: \"Name\",\n      role: \"Role\",\n      department: \"Department\",\n      salary: \"Salary\"\n    },\n    order: 1\n  };\n\n  handleInputChange = event => {\n    // this.setState({\n    //   employees: employees,\n    //   header: this.state.header,\n    //   order: this.state.order\n    // });\n\n    console.log(this.state.employees);\n\n    let department = event.target.value;\n    this.filterTable(department);\n  }\n\n  filterTable = (department) => {\n\n    this.setState({\n      header: this.state.header,\n      filtered: this.state.employees.filter(employee => employee.department.toLowerCase().includes(department.trim().toLowerCase())),\n      order: this.state.order\n    });\n  }\n\n  sortTable = event => {\n    event.preventDefault();\n    \n    const order = this.state.order;\n    this.setState({\n      header: this.state.header,\n      filtered: this.state.filtered.sort(function (a, b) {\n        return (order < 0 ? b.salary - a.salary : a.salary - b.salary);\n      }),\n      order: -1 * this.state.order\n    });\n    \n  }\n\n  render() {\n    return (\n        <Wrapper>\n          <Title/>\n          <Table>\n            <TableHead>\n              <ColumnHeader header={this.state.header}/>\n            </TableHead>\n\n            <TableBody>\n              {this.state.filtered.map(employee => (\n                <TableRow\n                  key={employee.id}\n                  employee={employee}\n                />\n              ))}\n            </TableBody>\n          </Table>\n          <Form handleInputChange={this.handleInputChange}/>\n          <Button handleClick={this.sortTable}>SORT</Button>\n        </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}